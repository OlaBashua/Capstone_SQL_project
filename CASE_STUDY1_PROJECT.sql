
CREATE DATABASE Case_study1 ;
USE Case_study1 ;
-- CASE STUDY 1 

-- TASKS TO BE PERFORMED 
-- Display the number of states present in the LocationTable.
SELECT  COUNT(DISTINCT State) as Number_of_states
FROM location;

-- How many products are of regular type?

SELECT COUNT(*) as Regular_product_count
FROM product 
WHERE type_p = 'Regular';

--  How much spending has been done on marketing of product ID 1?
SELECT SUM(Marketing) AS TotalMarketingSpending 
FROM Facts WHERE ProductId = 1;

-- What is the minimum sales of a product?
SELECT MIN(Sales) AS MinimumSales 
FROM Facts;

-- Display the max Cost of Good Sold (COGS)
SELECT MAX(COGS) AS Max_COGS 
FROM Facts;

-- Display the details of the product where product type is coffee
SELECT * 
FROM Product
 WHERE product_type = 'coffee';

--  Display the details where total expenses are greater than 40.

SELECT *
 FROM facts 
 WHERE TotalExpenses > 40;

-- What is the average sales in area code 719?
SELECT AVG(Sales) AS AverageSales
FROM Facts 
WHERE AreaCode = '719';

--  Find out the total profit generated by Colorado state.
SELECT SUM(f.Profit) AS TotalProfit
FROM Facts f
JOIN Location l 
USING(AreaCode)
WHERE l.State = 'Colorado';

--  Display the average inventory for each product ID.
SELECT ProductId, ROUND(AVG(Inventory)) AS AverageInventory
FROM Facts
GROUP BY ProductId;

--  Display state in a sequential order in a Location Table.
SELECT DISTINCT State
FROM Location
ORDER BY State ASC;

--  Display the average budget of the Product where the average budget margin should be greater than 100.
 SELECT AVG(BudgetMargin) AverageBudget
FROM facts
GROUP BY ProductId
HAVING AVG(BudgetMargin) > 100;

-- What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS TotalSales
FROM facts
WHERE DateID = '2010-01-01';

--  Display the average total expense of each product ID on an individual date.
SELECT DateID, ProductID ,AVG(TotalExpenses) 
From Facts
GROUP BY ProductID,DAteID;

--  Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
SELECT f.DateID, f.productID, p.product_type, p.product, f.sales, f.profit, l.state, l.AreaCode
FROM Facts f
JOIN Product  p
USING(ProductID)
JOIN Location l
USING (AreaCode);

--  Display the rank without any gap to show the sales wise rank.
 SELECT ProductID, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS SalesRank
FROM facts;

-- Find the state wise profit and sales.

SELECT l.State, SUM(Profit) AS TotalProfit, SUM(Sales) AS TotalSales
FROM facts f 
join location l
USING (AreaCode)
GROUP BY State 
ORDER BY State ASC;
-- Find the state wise profit and sales along with the product name.
 SELECT l.State, p.Product, SUM(f.Profit) AS TotalProfit, SUM(f.Sales) AS TotalSales
FROM Facts f
JOIN Product p 
ON f.ProductID = p.ProductID
JOIN Location  l 
ON f.AreaCode = l.AreaCode
GROUP BY l.State, p.Product ;

--  If there is an increase in sales of 5%, calculate the increased sales.
SELECT ProductID, Sales, Sales * 0.05 AS IncreasedSales
FROM facts;

-- Find the maximum profit along with the product ID and producttype.
SELECT p.ProductID, p.Product_type,  MAX(f.Profit) 
From  facts f
JOIN Product p
USING (productID)
GROUP BY ProductId
ORDER BY ProductId  ;

-- Create a stored procedure to fetch the result according to the product type from Product Table.
SHOW CREATE PROCEDURE FetchProduct_Type;

DELIMITER //

CREATE PROCEDURE FetchProduct_Type(IN product_Type VARCHAR(255))
BEGIN
    SELECT *
    FROM Product
    WHERE Product_Type = product_Type;
END //

DELIMITER ;

CALL FetchProduct_Type('Tea');

--  Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

SELECT ProductID, TotalExpenses,
CASE
    WHEN TotalExpenses < 60 THEN 'Profit'
    ELSE 'Loss'
END AS Profit_or_loss
FROM Facts;


-- Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.

SELECT DateID, ProductID, SUM(Sales) AS TotalSales
FROM Facts
GROUP BY DateID, ProductID WITH ROLLUP;

--  Apply union and intersection operator on the tables which consist of attribute area code.
SELECT AreaCode
FROM Facts
UNION
SELECT AreaCode
FROM  location;     -- UNION

SELECT f.AreaCode
FROM Facts f
INNER JOIN
location l
USING (AreaCode); -- INTERSECT

-- Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference.
DELIMITER //

CREATE FUNCTION GetProduct_Type(product_Type VARCHAR(50))
RETURNS
BEGIN
    RETURN (
        SELECT *
        FROM Product
        WHERE Product_Type = productT_ype
    );
END //

DELIMITER ;

SELECT *
FROM GetProduct_Type('Coffee');

-- Change the product type from coffee to tea where product ID is 1 and undo it.
UPDATE Product
SET Product_Type = 'tea'
WHERE ProductID = 1;

UPDATE Product
SET Product_Type = 'coffee'
WHERE ProductID = 1;

-- Display the date, product ID and sales where total expenses are between 100 to 200.
SELECT DateID, ProductID, Sales
FROM Facts
WHERE TotalExpenses BETWEEN 100 AND 200;

-- Delete the records in the Product Table for regular type.
DELETE FROM Product
WHERE Product_Type = 'regular' ;

--  Display the ASCII value of the fifth character from the columnProduct.
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCIIValue
FROM Product;

